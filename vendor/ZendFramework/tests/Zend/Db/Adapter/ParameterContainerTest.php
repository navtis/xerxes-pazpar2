<?php
namespace ZendTest\Db\Adapter;

use Zend\Db\Adapter\ParameterContainer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-01 at 15:37:15.
 */
class ParameterContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ParameterContainer
     */
    protected $parameterContainer;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->parameterContainer = new ParameterContainer(array('foo' => 'bar'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetExists
     */
    public function testOffsetExists()
    {
        $this->assertTrue($this->parameterContainer->offsetExists('foo'));
        $this->assertTrue(isset($this->parameterContainer['foo']));
        $this->assertFalse($this->parameterContainer->offsetExists('bar'));
        $this->assertFalse(isset($this->parameterContainer['bar']));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetGet
     */
    public function testOffsetGet()
    {
        $this->assertEquals('bar', $this->parameterContainer->offsetGet('foo'));
        $this->assertEquals('bar', $this->parameterContainer['foo']);

        // $this->assertEquals('bar', $this->parameterContainer->offsetGet('bar'));
        // @todo determine what should come back here
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetSet
     */
    public function testOffsetSet()
    {
        $this->parameterContainer->offsetSet('boo', 'baz');
        $this->assertEquals('baz', $this->parameterContainer->offsetGet('boo'));

        $this->parameterContainer->offsetSet(null, 'book', ParameterContainer::TYPE_STRING);
        $this->assertEquals(
            array('foo' => 'bar', 'boo' => 'baz', 0 => 'book'),
            $this->parameterContainer->toArray()
        );

        $this->assertEquals('string', $this->parameterContainer->offsetGetErrata(0));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetUnset
     */
    public function testOffsetUnset()
    {
        $this->parameterContainer->offsetSet('boo', 'baz');
        $this->assertTrue($this->parameterContainer->offsetExists('boo'));


        $this->parameterContainer->offsetUnset('boo');
        $this->assertFalse($this->parameterContainer->offsetExists('boo'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::setFromArray
     */
    public function testSetFromArray()
    {
        $this->parameterContainer->setFromArray(array('bar' => 'baz'));
        $this->assertEquals('baz', $this->parameterContainer['bar']);
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetSetErrata
     */
    public function testOffsetSetErrata()
    {
        $this->parameterContainer->offsetSetErrata('foo', ParameterContainer::TYPE_INTEGER);
        $this->assertEquals(ParameterContainer::TYPE_INTEGER, $this->parameterContainer->offsetGetErrata('foo'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetGetErrata
     */
    public function testOffsetGetErrata()
    {
        $this->parameterContainer->offsetSetErrata('foo', ParameterContainer::TYPE_INTEGER);
        $this->assertEquals(ParameterContainer::TYPE_INTEGER, $this->parameterContainer->offsetGetErrata('foo'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetHasErrata
     */
    public function testOffsetHasErrata()
    {
        $this->parameterContainer->offsetSetErrata('foo', ParameterContainer::TYPE_INTEGER);
        $this->assertTrue($this->parameterContainer->offsetHasErrata('foo'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::offsetUnsetErrata
     */
    public function testOffsetUnsetErrata()
    {
        $this->parameterContainer->offsetSetErrata('foo', ParameterContainer::TYPE_INTEGER);
        $this->parameterContainer->offsetUnsetErrata('foo');
        $this->assertNull($this->parameterContainer->offsetGetErrata('foo'));
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::getErrataIterator
     */
    public function testGetErrataIterator()
    {
        $this->parameterContainer->offsetSetErrata('foo', ParameterContainer::TYPE_INTEGER);
        $data = $this->parameterContainer->getErrataIterator();
        $this->assertInstanceOf('ArrayIterator', $data);
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::toArray
     */
    public function testToArray()
    {
        $data = $this->parameterContainer->toArray();
        $this->assertEquals(array('foo' => 'bar'), $data);
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::count
     */
    public function testCount()
    {
        $this->assertEquals(1, $this->parameterContainer->count());
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::current
     */
    public function testCurrent()
    {
        $value = $this->parameterContainer->current();
        $this->assertEquals('bar', $value);
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::next
     */
    public function testNext()
    {
        $this->parameterContainer['bar'] = 'baz';
        $this->parameterContainer->next();
        $this->assertEquals('baz', $this->parameterContainer->current());
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::key
     */
    public function testKey()
    {
        $this->assertEquals('foo', $this->parameterContainer->key());
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::valid
     */
    public function testValid()
    {
        $this->assertTrue($this->parameterContainer->valid());
        $this->parameterContainer->next();
        $this->assertFalse($this->parameterContainer->valid());
    }

    /**
     * @covers Zend\Db\Adapter\ParameterContainer::rewind
     */
    public function testRewind()
    {
        $this->parameterContainer->offsetSet('bar', 'baz');
        $this->parameterContainer->next();
        $this->assertEquals('bar', $this->parameterContainer->key());
        $this->parameterContainer->rewind();
        $this->assertEquals('foo', $this->parameterContainer->key());
    }
}
