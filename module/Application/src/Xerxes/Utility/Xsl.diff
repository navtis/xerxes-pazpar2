*** Xsl.php.orig	Thu Mar 15 10:16:09 2012
--- Xsl.php	Mon Mar  5 10:39:24 2012
***************
*** 108,124 ****
  	
  	private function generateBaseXsl( $path_to_file, $import_array = array(), $output_type)
  	{
! 		$files_to_import = array();
  		
  		### first, set up the paths to the distro and local directories
  
  		$distro_path =  $this->distro_xsl_dir . '/' . $path_to_file;
  		$local_path =  $this->local_xsl_dir . '/' . $path_to_file;
- 		      
  
  		### check to make sure at least one of the files exists
  		
  		$distro_exists = file_exists($distro_path);
  		$local_exists = file_exists($local_path);
  
  		// if we don't have either a local or a distro copy, that's a problem.
--- 108,126 ----
  	
  	private function generateBaseXsl( $path_to_file, $import_array = array(), $output_type)
  	{
! 		$global_files_to_import = array();
! 		$application_files_to_import = array();
! 		$local_files_to_import = array();
  		
  		### first, set up the paths to the distro and local directories
  
  		$distro_path =  $this->distro_xsl_dir . '/' . $path_to_file;
  		$local_path =  $this->local_xsl_dir . '/' . $path_to_file;
  
  		### check to make sure at least one of the files exists
  		
  		$distro_exists = file_exists($distro_path);
+ 
  		$local_exists = file_exists($local_path);
  
  		// if we don't have either a local or a distro copy, that's a problem.
***************
*** 128,134 ****
  			// throw new Exception("No xsl stylesheet found: $local_path || $distro_path");
  			throw new \Exception("No xsl stylesheet found: $path_to_file");
  		}			
! 		
  		
  		### now create the skeleton XSLT file that will hold references to both
  		### the distro and the local files
--- 130,154 ----
  			// throw new Exception("No xsl stylesheet found: $local_path || $distro_path");
  			throw new \Exception("No xsl stylesheet found: $path_to_file");
  		}			
! 
!         // Any main distro file must belong to a particular application
!         // so extract the prefix for that
!         if ($distro_exists) // why might it not?
!         {
! 		    $prefix = str_replace( $path_to_file, '',  strpos($path_to_file, '/') );
!             $application_path = $distro_path . '/' . $prefix;
!         }
!         else
!         {
!             // what to do if we just have an instance file? How could this happen?
!         }
! 
! 		### add a reference to the distro file to the front of the application array
! 
! 		if ( $distro_exists == true )
! 		{	
! 			array_push($application_files_to_import, $distro_path);
! 		}
  		
  		### now create the skeleton XSLT file that will hold references to both
  		### the distro and the local files
***************
*** 159,201 ****
  			$output->setAttribute("doctype-system", "http://www.w3.org/TR/html4/loose.dtd");
  		}
  		
- 		### add a reference to the distro file
- 
- 		if ( $distro_exists == true )
- 		{	
- 			array_push($files_to_import, $distro_path);
- 		}
  		
! 		### add a refence for files programatically added
  		
  		if ( $import_array != null )
  		{
  			foreach ( $import_array as $strInclude )
  			{
- 				// but only if a distro copy exists
- 				
  				$distro_include = $this->distro_xsl_dir . '/' . $strInclude;
  				$local_include = $this->local_xsl_dir . '/' . $strInclude;
  				
! 				// don't include the distro includes.xsl, since this messes things up!
! 				// @todo: figure out why includes.xsl is this weird exception
  				
! 				if ( file_exists($distro_include) && $strInclude != "includes.xsl")
  				{
! 					array_push($files_to_import, $distro_include);
  				}
  				
  				// see if there is a local version, and include it too
  				
  				if ( file_exists($local_include) )
  				{
! 					array_push($files_to_import, $local_include);
  				}
  			}
  		}
! 		
! 		### add a refence to the local file
! 		
  		if ( $local_exists )
  		{
  			$this->addIncludeReference( $generated_xsl, $local_path );
--- 179,214 ----
  			$output->setAttribute("doctype-system", "http://www.w3.org/TR/html4/loose.dtd");
  		}
  		
  		
! 		### add a reference for files programatically added
  		
  		if ( $import_array != null )
  		{
  			foreach ( $import_array as $strInclude )
  			{
  				$distro_include = $this->distro_xsl_dir . '/' . $strInclude;
+ 				$application_include = $application_path . '/' . $strInclude;
  				$local_include = $this->local_xsl_dir . '/' . $strInclude;
  				
! 				if ( file_exists($distro_include) )
! 				{
! 					array_push($global_files_to_import, $distro_include);
! 				}
  				
! 				if ( file_exists($application_include) )
  				{
! 					array_push($application_files_to_import, $application_include);
  				}
  				
  				// see if there is a local version, and include it too
  				
  				if ( file_exists($local_include) )
  				{
! 					array_push($local_files_to_import, $local_include);
  				}
  			}
  		}
! 		### add a reference to the local file
  		if ( $local_exists )
  		{
  			$this->addIncludeReference( $generated_xsl, $local_path );
***************
*** 218,224 ****
  			// find anything include'd or import'ed in original base file
  			
  			$array_merged = array_merge( $distroXml->xpath( "//xsl:include" ), $distroXml->xpath ( "//xsl:import" ) );
- 			
  			foreach ( $array_merged as $extra )
  			{
  				// path to local copy
--- 231,236 ----
***************
*** 228,247 ****
  				// path to distro copy as a check
  				
  				$distro_check = $this->distro_xsl_dir . '/' . dirname ( $path_to_file ) . '/' . $extra['href'];
- 				
  				// make sure local copy exists, and they are both not pointing at the same file 
  				
  				if ( file_exists( $local_candidate ) && realpath($distro_check) != realpath($local_candidate) )
  				{
! 					array_push($files_to_import, $local_candidate);
  				}
  			}
  		}
  		
! 		// now make sure no dupes
! 		
! 		$files_to_import = array_unique($files_to_import);
  		
  		
  		### now the actual mechanics of the import
  		
--- 240,261 ----
  				// path to distro copy as a check
  				
  				$distro_check = $this->distro_xsl_dir . '/' . dirname ( $path_to_file ) . '/' . $extra['href'];
  				// make sure local copy exists, and they are both not pointing at the same file 
  				
  				if ( file_exists( $local_candidate ) && realpath($distro_check) != realpath($local_candidate) )
  				{
! 					array_push($local_files_to_import, $local_candidate);
  				}
  			}
  		}
+ 
+ 		// now make sure no dupes, then merge
  		
! 		$local_files_to_import = array_unique($local_files_to_import);
! 		$application_files_to_import = array_unique($application_files_to_import);
! 		$global_files_to_import = array_unique($global_files_to_import);
  		
+         $files_to_import = array_merge($global_files_to_import, $application_files_to_import, $local_files_to_import);
  		
  		### now the actual mechanics of the import
  		
***************
*** 250,256 ****
  			$this->addImportReference ( $generated_xsl, $import, $output );
  		}
  		
! 		// header("Content-type: text/xml"); echo $generated_xsl->saveXML(); exit;
  		
  		return $generated_xsl;
  	}
--- 264,270 ----
  			$this->addImportReference ( $generated_xsl, $import, $output );
  		}
  		
! 		//header("Content-type: text/xml"); echo $generated_xsl->saveXML(); exit;
  		
  		return $generated_xsl;
  	}
***************
*** 291,294 ****
  		$include_element->setAttribute("href", $absoluteFilePath);
  		$xsltStylesheet->documentElement->appendChild( $include_element );
  	}
! }
\ No newline at end of file
--- 305,308 ----
  		$include_element->setAttribute("href", $absoluteFilePath);
  		$xsltStylesheet->documentElement->appendChild( $include_element );
  	}
! }
